<?php

namespace Eventix\PubSub;

use Nats\Connection;
use Nats\ConnectionOptions;

/**
 * Class PubSub
 * @package App\Facades
 *
 * Handle connection to a PubSub implementation, currently only NATS is used, extend this to some generic implementation
 * to make use of different systems (like kafka)
 */
class PubSub {

    /** @var \Nats\Connection */
    private $client = null;

    // Setup the connection to nats
    public function ensureClient() {
        if (!env('PUBSUB_ENABLED', false)) {
            $this->client = true;
        } else if (is_null($this->client)) {
            $this->client = new Connection(
                (new ConnectionOptions())
                    ->setHost(env('NATS_HOST', "127.0.0.1"))
                    ->setPort(env('NATS_PORT', 4222)));

            $this->client->connect();
        }

        return $this->client;
    }

    // Close the connection to nats when we exit
    public function __destruct() {
        if (is_null($this->client) || $this->client == true)
            return;

        // $this->client->close();
    }

    /**
     * Send a request to NATS to do something, returns the response
     *
     * @param String $subj The subject (request name) we are doing
     * @param String $data The data which will be sent
     * @return String The response generated by the request handler
     */
    public function request(String $subj, String $data = ""): ?String {
        $client = $this->ensureClient();
        if ($client === true)
            return null;
        else if (is_null($client))
            throw new \Exception("not booted");

        $msg = null;
        $client->request($subj, $data, function ($message) use (&$msg) {
            $msg = $message->getBody();
        });

        return $msg;
    }

    /**
     * Send a request to NATS to do something, sends callback to handle the response
     *
     * @param String $subj The subject (request name) we are doing
     * @param String $data The data which will be sent
     * @return String The response generated by the request handler
     */
    public function requestCallback(String $subj, \Closure $cb) {
        $client = $this->ensureClient();
        if ($client === true)
            return;
        else if (is_null($client))
            throw new \Exception("not booted");

        $msg = null;
        $client->request($subj, $data, $cb);

        return $msg;
    }

    /**
     * Publish a message over NATS
     *
     * @param String $subj The subject of the message
     * @param String $data The data which will be sent
     */
    public function publish(String $subj, $data = null, $collect = true) {
        if ($collect && !\App::runningInConsole())
            return $this->append($subj, $data);

        $this->ensureClient();

        if ($this->client === true)
            return;
        else if (is_null($this->client))
            throw new \Exception("not booted");

        try {
            return $this->client->publish($subj, $this->encode($data));
        } catch (\Exception $e) {
            \Log::error("Something went wrong submitting data to NATS", $e);
            abort(500, "errors.pubsub_publish_failed");
        }
    }

    /**
     * @param String $subj The subject to subscribe to
     * @param \Closure $cb The callback which handles a message
     * @return String The string of the identifier of the subscription
     */
    public function subscribe(String $subj, \Closure $cb): ?String {
        $client = $this->ensureClient();
        if ($client === true)
            return null;
        else if (is_null($client))
            throw new \Exception("not booted");

        return $client->subscribe($subj, $cb);
    }

    private $vals = null;

    private function append(String $subj, $data) {

        if (is_null($this->vals)) {
            $this->vals = [];

            \Finalizer::register(function () {
                $this->ensureClient();
                if ($this->client === true) {
                    \Log::error("Client is true");

                    return;
                } else if (is_null($this->client)) {
                    \Log::error("Client is true");
                    throw new \Exception("not booted");
                }

                $res = [];
                foreach ($this->vals as $s => $datas) {
                    $agg = [];
                    foreach ($datas as $datum) {
                        if (is_string($datum)) {
                            $res[] = [$s, $datum];
                        } else if (is_array($datum)) {
                            $agg += $datum;
                        }
                    }

                    if (count($agg))
                        $res[] = [$s, $agg];
                }

                foreach ($res as $send) {
                    \Log::info("About to send " . $send[0]);
                    try {
                        $this->client->publish($send[0], $this->encode($send[1]));
                    } catch (\Exception $e) {
                        \Log::error("Something went wrong submitting data to NATS, subj: $s", $e);
                    }
                }
            });
        }

        if (!key_exists($subj, $this->vals))
            $this->vals[$subj] = [];

        $this->vals[$subj][] = $data;
    }

    private function encode($data): String {
        if (is_string($data))
            return $data;

        return json_encode($data, JSON_NUMERIC_CHECK);
    }
}
